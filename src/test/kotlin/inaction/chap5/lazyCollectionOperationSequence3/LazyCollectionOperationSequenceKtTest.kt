package inaction.chap5.lazyCollectionOperationSequence3

import inaction.chap5.Person
import org.junit.jupiter.api.Test

class LazyCollectionOperationSequenceKtTest {
    private val people = listOf(
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
        Person("Alice", 29),
        Person("Bob", 31),
    )

    @Test
    fun testNotSequence() = assert(notSequence(people).size == 52)

    @Test
    fun testSequence() = assert(useSequence(people).size == 52)
}